version: 2
jobs:
  build:
    docker:
      - image: awk34/aksite-builder
      - image: mongo
        command: mongod

    working_directory: ~/aksite

    environment:
      NODE_ENV: test

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Store Service Account
          command: echo $ACCT_AUTH | base64 --decode -i > ~/account-auth.json
#      - run: gcloud --quiet components update
#      - run: gcloud --quiet components update kubectl
      - run: gcloud auth activate-service-account --key-file ~/account-auth.json
      - run: gcloud config set project $PROJECT_NAME
      - run: gcloud --quiet config set container/cluster $CLUSTER_NAME
      # Reading the zone from the env var is not working so we set it here
      - run: gcloud config set compute/zone ${CLOUDSDK_COMPUTE_ZONE}
#      - run: gcloud --quiet container clusters get-credentials $CLUSTER_NAME
#      - run: docker build --rm=false -t $EXTERNAL_REGISTRY_ENDPOINT/aksite:$CIRCLE_SHA1 .

      # Global npm dependencies
      - restore_cache:
          keys:
            - aksite-npm-global-{{ .Branch }}
            - aksite-npm-global-
      - save_cache:
          key: aksite-npm-global-{{ .Branch }}
          paths:
            - /usr/local/lib/node_modules

      # npm dependencies
      - restore_cache:
          keys:
            - aksite-npm-{{ .Branch }}-{{ checksum "package.json" }}
            - aksite-npm-{{ .Branch }}
            - -npm-
      - run: npm install --quiet
      - save_cache:
          key: aksite-npm-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/aksite/node_modules

      # docker dependencies
#      - restore_cache:
#          keys:
#            - aksite-docker-{{ .Branch }}-{{ checksum "~/docker/image.tar" }}
#            - aksite-docker-{{ .Branch }}
#            - -docker-
#        # If we have a cached image, load it into docker
#        - run: if [[ -e ~/docker/image.tar ]]; then docker load -i ~/docker/image.tar; fi
#        # Else make a new build and save the docker image to the cache
#        - run: if [[ ! -e ~/docker/image.tar ]]; then npm run build && cd dist && docker build --rm=false -t gcr.io/${PROJECT_NAME}/aksite:$CIRCLE_SHA1 .; fi
#        - run: if [[ ! -e ~/docker/image.tar ]]; then mkdir -p ~/docker; docker save gcr.io/${PROJECT_NAME}/aksite:$CIRCLE_SHA1 > ~/docker/image.tar; fi
#        # The problem here is that the CircleCI cache is created at the end of the 'dependencies' section,
#        # so the build in the deployment step can't be cached.
#      - save_cache:
#          key: aksite-docker-{{ .Branch }}-{{ checksum "~/docker/image.tar" }}
#          paths:
#            - ~/kubernetes
#            - ~/docker

      - run: npm run build
      - run: npm test

#      - deploy:
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "master" ]; then
#              cd dist && docker build --rm=false -t gcr.io/${PROJECT_NAME}/aksite:$CIRCLE_SHA1 .
#              # Using a separate tag command until Docker 1.10 is available on CircleCI, then we can use two tags in the build command above
#              docker tag gcr.io/${PROJECT_NAME}/aksite:$CIRCLE_SHA1 gcr.io/${PROJECT_NAME}/aksite:latest
#              gcloud auth activate-service-account --key-file ~/account-auth.json
#              chmod 0744 ./scripts/deploy.sh
#              ./scripts/deploy.sh
#            fi
